variables:
  # CI variables
  DOCKER_DRIVER: overlay2
  DOCKER_HOST: tcp://localhost:2375
  DOCKER_TLS_CERTDIR: ''
  GIT_STRATEGY: fetch
  GIT_DEPTH: 5
  
  # Globals
  DOCKER_VERSION: "18"
  PYTHON_VERSION: "3.6-alpine"

stages:
- "Prepare"
- "Build Image"
- "Registration"

.prepare_stage:
  stage: "Prepare"
  dependencies: []

.base_yarn_workspace_install:
  extends: .prepare_stage
  image: node:13-alpine
  interruptible: true
  script:
    - "[[ type jq ]] || apk add jq=~1"
    - apk add --no-cache --virtual .gyp make python gcc postgresql-dev g++
    - "{ rm package.json; jq 'del(.dependencies) | del(.devDependencies)' > package.json; } < package.json"

    - yarn config set cache-folder $CI_PROJECT_DIR/.yarn
    - yarn --frozen-lockfile

################################################################################################
###################################               ##############################################
###################################     PREPARE   ##############################################
###################################               ##############################################
################################################################################################


Install api:
  extends: .base_yarn_workspace_install
  variables:
    CONTEXT: api
  before_script:
    - find packages -maxdepth 1 -type d -not -name api -not -name knex | tail -n +2 | xargs rm -rf
  artifacts:
    expire_in: 1 day
    paths:
      - node_modules
      - packages/api/node_modules

Install app:
  extends: .base_yarn_workspace_install
  variables:
    CONTEXT: app
  before_script:
    - find packages -maxdepth 1 -type d -not -name app | tail -n +2 | xargs rm -rf
  artifacts:
    expire_in: 1 day
    paths:
      - node_modules
      - packages/app/node_modules

################################################################################################
###################################                    #########################################
###################################     BUILD IMAGE    #########################################
###################################                    #########################################
################################################################################################

Build @gameofblocks/app:
  stage: "Build Image"
  variables:
    INVALID_GIT_FILES_CHANGES: "true"
  dependencies:
    - Install app
  needs:
    - Install app
  image: node:12-alpine
  script:
    - yarn workspace @gameofblocks/app build
  artifacts:
    expire_in: 1 day
    paths:
      - packages/app/.next

################################################################################################
###################################                    #########################################
###################################     REGISTRATION   #########################################
###################################                    #########################################
################################################################################################

#
# docker image registration
# these base jobs can be reused to build and publish your docker images
#

.base_docker_image_stage:
  image: docker:19
  services:
    - docker:19-dind

.base_register_stage:
  stage: "Registration"
  extends: .base_docker_image_stage
  script:
    # NOTE(douglasduteil): use echo "$CI_JOB_TOKEN" to remove docker login warning.
    # `WARNING! Using --password via the CLI is insecure. Use --password-stdin`
    - echo "$CI_JOB_TOKEN" | docker login $CI_REGISTRY -u gitlab-ci-token --password-stdin
    - >-
      if [[ -n "${CI_COMMIT_TAG}" ]]; then
        export TAG=$(printf "${CI_COMMIT_TAG}" | sed "s/^v//")
        echo "Register ${CI_COMMIT_TAG} tag as ${TAG}"
      else
        export TAG=$CI_COMMIT_REF_SLUG
        echo "Register ${TAG} branch"
      fi
    #
    # NOTE(douglasduteil): aggressive caching strategy.
    # As we don't know which image is the closest to the one we are registering
    # we pull all the images that can help.
    # From the previous commit, to the current branch or the master branch, the
    # first to be defined will be our cache :)
    - |
      [[ -n "${TRACE}" ]] && set -x

      function set_cache_image() {
        if docker pull ${IMAGE_NAME}:$1; then
          export CACHE_TAG=$1
        fi
      }

      echo ""
      echo "Checking last commit (${CI_COMMIT_BEFORE_SHA}) cache"
      set_cache_image "${CI_COMMIT_BEFORE_SHA}"

      if [[ -z "${CACHE_TAG}" ]]; then
        echo ""
        echo "Checking current branch/tag (${TAG}) cache"
        set_cache_image "${TAG}"
      fi

      if [[ -z "${CACHE_TAG}" ]]; then
        echo ""
        echo "Checking default branch (${CI_DEFAULT_BRANCH}) cache"
        set_cache_image "${CI_DEFAULT_BRANCH}"
      fi

      echo ""
      if [[ -n "${CACHE_TAG}" ]] ; then
        echo "Using ${CACHE_TAG} tag as cache"
      else
        echo "No cache ! Naked build :("
      fi

    - echo "
      docker build
      --cache-from ${IMAGE_NAME}:${CACHE_TAG}
      -t ${IMAGE_NAME}:${CI_COMMIT_SHA}
      -t ${IMAGE_NAME}:${TAG}
      $DOCKER_BUILD_ARGS
      $CONTEXT"
    - docker build
      --cache-from ${IMAGE_NAME}:${CACHE_TAG}
      -t ${IMAGE_NAME}:${CI_COMMIT_SHA}
      -t ${IMAGE_NAME}:${TAG}
      $DOCKER_BUILD_ARGS
      $CONTEXT
    - docker push ${IMAGE_NAME}:${CI_COMMIT_SHA}
    - docker push ${IMAGE_NAME}:${TAG}

.base_stage:
  except:
    variables:
      # Don't run when running e2e tests
      - $E2E_TEST
      # Don't run when deploying in production an existing image
      - $PRODUCTION
      # Don't run when tagging a commit
      - $RELEASE

.register_stage:
  extends: .base_stage
  stage: "Registration"
  interruptible: true
  dependencies: []

Register app image:
  extends:
    - .base_register_stage
    - .register_stage
  dependencies:
    - Build @gameofblocks/app
  needs:
    - Install app
    - Build @gameofblocks/app
  before_script:
    - cp yarn.lock packages/app/yarn.lock
  variables:
    CONTEXT: packages/app
    IMAGE_NAME: $CI_REGISTRY_IMAGE/app