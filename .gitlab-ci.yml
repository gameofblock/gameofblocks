include:
  - local: .gitlab/ci/base_register_stage.yml

variables:
  # CI variables
  DOCKER_DRIVER: overlay2
  DOCKER_HOST: tcp://localhost:2375
  DOCKER_TLS_CERTDIR: ''
  GIT_STRATEGY: fetch
  GIT_DEPTH: 5
  
  # Globals
  DOCKER_VERSION: "18"
  PYTHON_VERSION: "3.6-alpine"

stages:
- "Prepare"
- "Build Image"
- "Registration"
- "Deploy"

.prepare_stage:
  stage: "Prepare"
  dependencies: []

.base_yarn_workspace_install:
  extends: .prepare_stage
  image: node:13-alpine
  interruptible: true
  script:
    - "[[ type jq ]] || apk add jq=~1"
    - apk add --no-cache --virtual .gyp make python gcc postgresql-dev g++
    - "{ rm package.json; jq 'del(.dependencies) | del(.devDependencies)' > package.json; } < package.json"

    - yarn config set cache-folder $CI_PROJECT_DIR/.yarn
    - yarn --frozen-lockfile

################################################################################################
###################################               ##############################################
###################################     PREPARE   ##############################################
###################################               ##############################################
################################################################################################


Install api:
  extends: .base_yarn_workspace_install
  variables:
    CONTEXT: api
  before_script:
    - find packages -maxdepth 1 -type d -not -name api -not -name knex | tail -n +2 | xargs rm -rf
  artifacts:
    expire_in: 1 day
    paths:
      - node_modules
      - packages/api/node_modules

Install app:
  extends: .base_yarn_workspace_install
  variables:
    CONTEXT: app
  before_script:
    - find packages -maxdepth 1 -type d -not -name app | tail -n +2 | xargs rm -rf
  artifacts:
    expire_in: 1 day
    paths:
      - node_modules
      - packages/app/node_modules

################################################################################################
###################################                    #########################################
###################################     BUILD IMAGE    #########################################
###################################                    #########################################
################################################################################################

Build @gameofblocks/app:
  stage: "Build Image"
  variables:
    INVALID_GIT_FILES_CHANGES: "true"
  dependencies:
    - Install app
  needs:
    - Install app
  image: node:12-alpine
  script:
    - yarn workspace @gameofblocks/app build
  artifacts:
    expire_in: 1 day
    paths:
      - packages/app/.next

################################################################################################
###################################                    #########################################
###################################     REGISTRATION   #########################################
###################################                    #########################################
################################################################################################

#
# docker image registration
# these base jobs can be reused to build and publish your docker images
#

.base_docker_image_stage:
  image: docker:19
  services:
    - docker:19-dind



.base_stage:
  except:
    variables:
      # Don't run when running e2e tests
      - $E2E_TEST
      # Don't run when deploying in production an existing image
      - $PRODUCTION
      # Don't run when tagging a commit
      - $RELEASE

.register_stage:
  extends: .base_stage
  stage: "Registration"
  interruptible: true
  dependencies: []

Register app image:
  extends:
    - .base_register_stage
    - .register_stage
  dependencies:
    - Build @gameofblocks/app
  needs:
    - Install app
    - Build @gameofblocks/app
  before_script:
    - cp yarn.lock packages/app/yarn.lock
  variables:
    CONTEXT: packages/app
    IMAGE_NAME: $CI_REGISTRY_IMAGE/app


############### Deploy APP ###############################

Deploy app:
  stage: "Deploy"
  image: google/cloud-sdk
  services:
  - docker:dind
  variables:
    CONTEXT: app
    IMAGE_TAG: $CI_COMMIT_SHA
    PORT: 80
  before_script:
    - source ./.gitlab/env.sh
    - HOST=${FRONTEND_HOST}
  script:
    - helm install helm-chart --generate-name